@page "/ThanhToan"
@using QRCoder
@using System.Drawing
@using System.IO
@using System.Drawing.Imaging
@using WebAsemly_NoiThat.Service
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using WebAsemly_NoiThat.Model


<div class="row">
    <div class="col-md-7">
        <div class="form-group">
            <label class="form-label">Tên người dùng:</label>
            <input type="text" class="form-control sua" id="TenND" name="TenND" value="@account.TenNguoiDung" />
        </div>
        <div class="form-group">
            <label class="form-label">Số điện thoại:</label>
            <input type="text" class="form-control sua" id="SDT" name="SDT" value="@account.SDT" />
        </div>

        <div class="form-group">
            <label class="form-label">Địa chỉ:</label>
            <input type="text" class="form-control sua" id="Diachi" name="Diachi" placeholder="Địa chỉ" />
        </div>

        <div>
            <label for="paymentMethod">Phương thức thanh toán:</label>
            <select id="paymentMethod" name="paymentMethod" class="form-select">
                <option value="CreditCard">Credit Card</option>
                <option value="PayPal">PayPal</option>
                <option value="Thanh toán trực tiếp">Thanh toán khi nhận hàng</option>
            </select>
        </div>


        <button type="submit" class="btn btn-danger text-white mb-3 mt-3" style="width:50%; font-size:larger; border-radius:0; margin:0 auto" @onclick="HandlePayment">THANH TOÁN</button>
    </div>
    <div class="col-md-5">
        <div class="card" style="border-radius:0">
            <h3 class="text-center mt-4 font-weight-bold">THÔNG TIN ĐƠN HÀNG</h3>
            <hr />
            <div class="row">
                @if (cartItems == null)
                {
                    <p><em>Loading...</em></p>
                }
                else if (cartItems.Count == 0)
                {
                    <p class="text-center"><em>Giỏ hàng trống</em></p>
                }
                else
                {
                    @foreach (var item in cartItems)
                    {
                        var totalPrice = item.Quantity * item.Gia;

                        <div class="col-md-4 mb-3">
                            <div class="ml-3">
                                <img src="/Image_SP_ASM/@item.HinhAnh" width="100%" height="100%" />
                            </div>
                        </div>
                        <div class="col-md-8 mb-3">
                            <span style="white-space: nowrap, overflow: hidden, text-overflow: ellipsis,display: block,width: 90%">Tên sản phẩm: <strong>@item.TenSP</strong></span><br />
                            <span>Số lượng: <span class="text-primary">@item.Quantity</span></span><br />
                            <span>Giá: <span class="text-danger">@item.Gia.ToString("N0") VNĐ</span></span>
                        </div>
                    }
                }
            </div>
            <hr />
            <div class="row ml-3 mb-3" style="font-size:20px">
                <strong>
                    Tổng tiền: 
                 <span  class="text-danger">@totalPrice.ToString("N0") VNĐ</span></strong>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }

    </div>
</div>

@code {
    private List<Model.Product> cartItems;
    private Model.Account account = new Model.Account();
    private double totalPrice = 0;
    private string errorMessage;


    protected override async Task OnInitializedAsync()
    {
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

        if (string.IsNullOrEmpty(userId))
        {
            // Nếu chưa đăng nhập, chuyển hướng về trang đăng nhập
            Navigation.NavigateTo("/DangNhap");
            return;
        }

        
        account = await Http.GetFromJsonAsync<Model.Account>($"https://localhost:44320/api/Account/{userId}");
        // Lấy giỏ hàng từ localStorage
        cartItems = await LocalStorageService.GetItemAsync<List<Model.Product>>($"Cart_{userId}") ?? new List<Model.Product>();
        totalPrice = cartItems.Sum(item => item.Gia * item.Quantity);
    }

    private async Task HandlePayment()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            foreach (var item in cartItems)
            {
                var product = await Http.GetFromJsonAsync<Product>($"https://localhost:44320/api/Product/{item.ID}");
                if (item.Quantity > product.SoLuongTrongKho)
                {
                    errorMessage = $"Sản phẩm {item.TenSP} chỉ còn {product.SoLuongTrongKho} trong kho.";
                    return;
                }
            }

            var bill = new Bill
                {
                    IDThanhToan = 1,
                    IDVanChuyen = 1,
                    IDNguoiDung = int.Parse(userId),
                    TongTien = (float)totalPrice,
                    NgayDatHang = DateTime.Now.ToString("yyyy-MM-dd"),
                    TrangThai = "Chờ xử lý",
                    BillDetail = new List<BillDetail>()
                };

            foreach (var item in cartItems)
            {
                var product = await Http.GetFromJsonAsync<Product>($"https://localhost:44320/api/Product/{item.ID}");

                if (item.Quantity > product.SoLuongTrongKho)
                {
                    errorMessage = $"Sản phẩm {item.TenSP} chỉ còn {product.SoLuongTrongKho} trong kho.";
                    return;
                }

                var billDetail = new BillDetail
                    {
                        IDSanPham = item.ID,
                        SoLuong = item.Quantity
                    };
                bill.BillDetail.Add(billDetail);

                product.SoLuongTrongKho -= item.Quantity;
                await Http.PutAsJsonAsync($"https://localhost:44320/api/Product/{product.ID}", product);
            }

            var response = await Http.PostAsJsonAsync("https://localhost:44320/api/HoaDon", bill);
            await LocalStorageService.RemoveItemAsync($"Cart_{userId}");
            await JSRuntime.InvokeVoidAsync("showNotification", "Thanh toán thành công!", "success");
            Navigation.NavigateTo("/");

        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi không xác định: {ex.Message}";
        }
    }

}


   

 
