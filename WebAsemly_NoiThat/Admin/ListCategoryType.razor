@page "/admin/list-categorytypes"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@layout AdminLayout
@using WebAsemly_NoiThat.Model


<div class="row mt-3">
    <div class="col-md-6">
        <h3>Danh Sách Danh Mục Con</h3>
    </div>
    <div class="col-md-6">
        <div class="row">
            <div class="col-md-6">
                <input type="text" @bind="searchTerm" @oninput="SearchCategoryTypes" class="form-control" placeholder="Tìm kiếm theo tên danh mục con..." />
            </div>
            <div class="col-md-6">
                <button class="btn btn-primary" @onclick="AddCategory">Thêm danh mục</button>
            </div>
        </div>
    </div>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th class="text-center">ID</th>
            <th class="text-center">Tên Danh Mục Con</th>
            <th class="text-center">Hình Ảnh</th>
            <th class="text-center">Trạng Thái</th>
            <th class="text-center">Thao Tác</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredCategoryTypes.Any())
        {
            @foreach (var categoryType in filteredCategoryTypes)
            {
                <tr>
                    <td style="text-align: center; vertical-align: middle;">@categoryType.ID</td>
                    <td style="text-align: center; vertical-align: middle;">@categoryType.TenLoaiDanhMuc</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <img src="@categoryType.HinhAnh" alt="@categoryType.TenLoaiDanhMuc" class="img-fluid" width="100" />
                    </td>
                    <td style="text-align: center; vertical-align: middle;">@categoryType.TrangThai</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <button class="bi bi-eye btn btn-info" @onclick="() => ViewCategoryType(categoryType.ID)"></button>
                        <button class="btn btn-primary bi bi-pen" @onclick="() => EditCategoryType(categoryType.ID)"></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">Không có danh mục con nào.</td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation example mb-5">
    <ul class="pagination justify-content-center">
        <li class="page-item">
            <a class="page-link" @onclick="PreviousPage" disabled="@(!HasPreviousPage)" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
            <a class="page-link" @onclick="NextPage" disabled="@(!HasNextPage)" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    private List<CategoryType> categoryTypes = new List<CategoryType>();
    private List<CategoryType> filteredCategoryTypes = new List<CategoryType>();
    private int currentPage = 0;
    private int pageSize = 10;
    private bool hasMoreCategoryTypes = true;
    private bool hasPreviousPage = false;
    private string searchTerm = string.Empty;

    private bool HasNextPage => hasMoreCategoryTypes;
    private bool HasPreviousPage => hasPreviousPage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoryTypes();
        FilterCategoryTypes();
    }

    private async Task LoadCategoryTypes()
    {
        var response = await Http.GetFromJsonAsync<List<CategoryType>>($"https://localhost:44320/api/CategoryType?pageIndex={currentPage}&pageSize={pageSize}");

        if (response != null && response.Any())
        {
            categoryTypes = response; // Hiển thị 5 danh mục hiện tại
            filteredCategoryTypes = categoryTypes;
            hasMoreCategoryTypes = response.Count == pageSize;
            hasPreviousPage = currentPage > 0;
        }
        else
        {
            hasMoreCategoryTypes = false;
            hasPreviousPage = currentPage > 0;
        }
    }

    private async Task NextPage()
    {
        currentPage++;
        await LoadCategoryTypes();
        FilterCategoryTypes();
    }

    private async Task PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            await LoadCategoryTypes();
            FilterCategoryTypes();
        }
    }

    private void FilterCategoryTypes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCategoryTypes = categoryTypes;
        }
        else
        {
            filteredCategoryTypes = categoryTypes
                .Where(ct => ct.TenLoaiDanhMuc.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void SearchCategoryTypes(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        FilterCategoryTypes();
    }

    private void ViewCategoryType(int id)
    {
        NavigationManager.NavigateTo($"/admin/categorytype-details/{id}");
    }

    private void EditCategoryType(int id)
    {
        NavigationManager.NavigateTo($"/admin/edit-categorytype/{id}");
    }
    private void AddCategory()
    {
        NavigationManager.NavigateTo("admin/add-categorytype");
    }
}
